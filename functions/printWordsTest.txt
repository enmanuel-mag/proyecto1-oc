.globl main


.data

pokeTypesPath:   .asciiz "C:\\Users\\Josue\\Documents\\Organizacion Proyecto\\proyecto1-oc\\pokeTypes.txt"      # filename for output
pokeTypesBuffer: .space 1821 #1.77 Kb tiene el archivo types.txt
pokeTypesArray: .space 3456 #Son 108 pokemones -> space = 108 * 32 bytes

.text

main:	#test read file 
	la $a0, pokeTypesPath
	la $a1, pokeTypesBuffer
	li $a2, 1821
  	jal read
  	
  	#test string split by
	la $a0, pokeTypesBuffer 		#cargo la direccion del string
	la $a1, pokeTypesArray  # buffer donde se ubicaran los elementos
	li $a2, '\n'		#108 elementos/pokemones
	li $a3, 108
	jal stringSplitBy
  	
  	#print array
  	la $a0, pokeTypesArray #direccion del buffer
	li $a1, 108  #cantidad de elementos
	li $a2,0 #item inicio -----------empieza en 0
	jal printWordsInBuffer
  	
	#exit
	li $v0,10
	syscall


# $a0 -> string ruta
# $a1 -> buffer de lectura
# $a2 -> tamaÃ±o del buffer en bytes
# $v0 -> buffer con el contenido leido
read:
	addi $sp, $sp, -32
	sw $t0, 0($sp)
	sw $t1, 4($sp)
	sw $t2, 8($sp)
	sw $t3, 12($sp)
	sw $a0, 16($sp)
	sw $a1, 20($sp)
	sw $a2, 24($sp)
	sw $ra, 28($sp)

	la $t1, ($a0)
	la $t2, ($a1)
	move $t3, $a2
	
  	# Open (for reading) a file
  	li $v0, 13       # system call for open file
  	li $a1, 0        # flags
  	syscall          # open a file (file descriptor returned in $v0)

  	move $t0, $v0    # save file descriptor in $t0		
  	# Read to file just opened  
  	li $v0, 14       # system call for read to file
  	la $a1, ($t2)   # address of buffer from which to write
  	move $a2, $t3   # hardcoded buffer length
  	move $a0, $t0    # put the file descriptor in $a0		
  	syscall          # read from file

 	 # Close the file 
  	li $v0, 16       # system call for close file
  	move $a0, $t0    # Restore fd
  	syscall          # close file

  	la $v0, ($t2)
  	
  	lw $t0, 0($sp)
	lw $t1, 4($sp)
	lw $t2, 8($sp)
	lw $t3, 12($sp)
	lw $a0, 16($sp)
	lw $a1, 20($sp)
	lw $a2, 24($sp)
	lw $ra, 28($sp)
	addi $sp, $sp, 32
	
  	jr $ra



#$a0 -> Direccion del string
#$a1 -> direccion del buffer para los elementos(quemado)
#$a2 -> separator char
#$a3 -> numero de elementos a copiar
#retorno
#$v0 -> direccion del buffer lleno
#$v1 -> elementos copiados
stringSplitBy:

	addi $sp, $sp, -36
	sw $a0, 0($sp)
	sw $a1, 4($sp)
	sw $a2, 8($sp)
	sw $a3, 12($sp)
	sw $t0, 16($sp)
	sw $t1, 20($sp)
	sw $t2, 24($sp)
	sw $t3, 28($sp)
	sw $ra, 32($sp)
	
	li $t0, 0 #cantidad de elemetnos copiados
	li $t2, 0 #indice del buffer
	la $t3, ($a1) #respaldo la direccion del buffer
	while:
		slt $t1, $t0, $a3
		beq $t1, $0, elementosCopiados
		
		sll $t2, $t0, 5 	#nuevo indice del buffer (multiplo de 4)
		add $a1, $a1, $t2	#preparo la nueva direccion
		jal stringSection
		#preparo la sgt llamda
		la $a0, ($v1)	#avanza la direccion del string
		addi $t0, $t0, 1 #aumento en 1 los elementos copiados
		#addi $t2, $t2, 1 #avanza el indice del buffer
		j while
	elementosCopiados:
		la $v0, ($t3) #direccion del buffer donde estan todos los elementos
		move $v1, $t0 #total de elementos copiados 
		
		lw $a0, 0($sp)
		lw $a1, 4($sp)
		lw $a2, 8($sp)
		lw $a3, 12($sp)
		lw $t0, 16($sp)
		lw $t1, 20($sp)
		lw $t2, 24($sp)
		lw $t3, 28($sp)
		lw $ra, 32($sp)
		addi $sp, $sp, 28
		jr $ra
	
#$a0 -> direccion string 
#$a1 -> Copybuffer
#$a2 -> Caracter hasta el cual buscar: caracteres $zero -> \0 ; \n
#$v0 -> direccion del string copiado
#$v1 -> direccion despues de haber encontrado el separdor 
stringSection:####################No se puede copiar un string de exceda la capacidad de un registro
	addi $sp, $sp, -24
	sw $a0, 0($sp)
	sw $a1, 4($sp)
	sw $a2, 8($sp)
	sw $t0, 12($sp)
	sw $t1, 16($sp)
	sw $ra, 20($sp)
	
	la $t1, ($a1)
	copyCharLoop:
		lb      $t0,($a0)                   # get next char from str1
		
		beq     $t0,$a2,endOfSection             # at End Of String? yes, fly (strings equal)
		beq     $t0,$zero,endOfSection             # at End Of String? yes, fly (strings equal)
		
		sb      $t0, ($a1)                   # store next char to $t1
	
	 	addi    $a0,$a0,1                   # point to next char
	 	addi    $a1,$a1,1                   # point to next char
		j copyCharLoop
	endOfSection:
	la $v0, ($t1)				#retorna la direccion del string coppia
	addi    $a0,$a0,1                   # me salto el nullo y entrego la nueva direccion
	la $v1, ($a0)				#retorna la direccion del string original avanzado 1 caracter
	
	lw $a0, 0($sp)
	lw $a1, 4($sp)
	lw $a2, 8($sp)
	lw $t0, 12($sp)
	lw $t1, 16($sp)
	lw $ra, 20($sp)
	addi $sp, $sp, 24
	
	jr $ra
	
#$a0 direccion del buffer
#$a1 cantidad de elementos
#$a2 item inicio -----------empieza en 0
printWordsInBuffer:

	addi $sp, $sp, -32
	sw $t0, 0($sp)
	sw $t1, 4($sp)
	sw $t2, 8($sp)
	sw $a0, 12($sp)
	sw $a1, 16($sp)
	sw $v0, 20($sp)
	sw $a2, 24($sp)
	sw $ra, 28($sp)

	li $t0, 0 #elementos impresos
	li $t2, 0 #indice el buffer
	printLoop:
		slt $t1, $t0, $a1
		bne $t1, 1, todosImpresos 
		
		sll $t2, $t0, 5
		add $a0, $a0, $t2
		
		li $v0, 4
		syscall
		jal printLn
		
		addi $t0, $t0, 1
		
		j printLoop
	todosImpresos:
		lw $t0, 0($sp)
		lw $t1, 4($sp)
		lw $t2, 8($sp)
		lw $a0, 12($sp)
		lw $a1, 16($sp)
		lw $v0, 20($sp)
		lw $a2, 24($sp)
		lw $ra, 28($sp)
		addi $sp, $sp, 32
		jr $ra	
	
printLn:
	addi $sp, $sp, -8
	sw $v0, 0($sp)
	sw $a0, 4($sp)
	
	li $v0, 11 
	la $a0, '\n'      
    	syscall
    	
    	lw $v0, 0($sp)
	lw $a0, 4($sp)
	addi $sp, $sp, 8
    	jr $ra
